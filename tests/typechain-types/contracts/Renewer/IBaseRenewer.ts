/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IBaseRenewerInterface extends utils.Interface {
  functions: {
    "price(string,uint256,address)": FunctionFragment;
    "renew(string,uint256,address)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "price" | "renew" | "setFeeManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "price",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;

  events: {
    "FeeManagerChanged(address,address)": EventFragment;
    "NameRenewed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
}

export interface FeeManagerChangedEventObject {
  hostContract: string;
  feeManagerContract: string;
}
export type FeeManagerChangedEvent = TypedEvent<
  [string, string],
  FeeManagerChangedEventObject
>;

export type FeeManagerChangedEventFilter =
  TypedEventFilter<FeeManagerChangedEvent>;

export interface NameRenewedEventObject {
  partner: string;
  duration: BigNumber;
}
export type NameRenewedEvent = TypedEvent<
  [string, BigNumber],
  NameRenewedEventObject
>;

export type NameRenewedEventFilter = TypedEventFilter<NameRenewedEvent>;

export interface IBaseRenewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaseRenewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    price(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renew(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManager(
      feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  price(
    name: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    partner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renew(
    name: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    partner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeManager(
    feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    price(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renew(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManager(
      feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeManagerChanged(address,address)"(
      hostContract?: null,
      feeManagerContract?: null
    ): FeeManagerChangedEventFilter;
    FeeManagerChanged(
      hostContract?: null,
      feeManagerContract?: null
    ): FeeManagerChangedEventFilter;

    "NameRenewed(address,uint256)"(
      partner?: PromiseOrValue<string> | null,
      duration?: null
    ): NameRenewedEventFilter;
    NameRenewed(
      partner?: PromiseOrValue<string> | null,
      duration?: null
    ): NameRenewedEventFilter;
  };

  estimateGas: {
    price(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renew(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeManager(
      feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    price(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renew(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
