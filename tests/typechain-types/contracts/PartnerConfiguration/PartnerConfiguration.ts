/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PartnerConfigurationInterface extends utils.Interface {
  functions: {
    "getDiscount()": FunctionFragment;
    "getFeePercentage()": FunctionFragment;
    "getMaxDuration()": FunctionFragment;
    "getMaxLength()": FunctionFragment;
    "getMinCommitmentAge()": FunctionFragment;
    "getMinDuration()": FunctionFragment;
    "getMinLength()": FunctionFragment;
    "getPrice(string,uint256,uint256)": FunctionFragment;
    "setDiscount(uint256)": FunctionFragment;
    "setFeePercentage(uint256)": FunctionFragment;
    "setMaxDuration(uint256)": FunctionFragment;
    "setMaxLength(uint256)": FunctionFragment;
    "setMinCommitmentAge(uint256)": FunctionFragment;
    "setMinDuration(uint256)": FunctionFragment;
    "setMinLength(uint256)": FunctionFragment;
    "validateName(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDiscount"
      | "getFeePercentage"
      | "getMaxDuration"
      | "getMaxLength"
      | "getMinCommitmentAge"
      | "getMinDuration"
      | "getMinLength"
      | "getPrice"
      | "setDiscount"
      | "setFeePercentage"
      | "setMaxDuration"
      | "setMaxLength"
      | "setMinCommitmentAge"
      | "setMinDuration"
      | "setMinLength"
      | "validateName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCommitmentAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCommitmentAge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateName",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateName",
    data: BytesLike
  ): Result;

  events: {
    "DiscountChanged(uint256,uint256)": EventFragment;
    "FeePercentageChanged(uint256,uint256)": EventFragment;
    "MaxDurationChanged(uint256,uint256)": EventFragment;
    "MaxLengthChanged(uint256,uint256)": EventFragment;
    "MinCommitmentAgeChanged(uint256,uint256)": EventFragment;
    "MinDurationChanged(uint256,uint256)": EventFragment;
    "MinLengthChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiscountChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxDurationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxLengthChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCommitmentAgeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDurationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinLengthChanged"): EventFragment;
}

export interface DiscountChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type DiscountChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DiscountChangedEventObject
>;

export type DiscountChangedEventFilter = TypedEventFilter<DiscountChangedEvent>;

export interface FeePercentageChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type FeePercentageChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeePercentageChangedEventObject
>;

export type FeePercentageChangedEventFilter =
  TypedEventFilter<FeePercentageChangedEvent>;

export interface MaxDurationChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type MaxDurationChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxDurationChangedEventObject
>;

export type MaxDurationChangedEventFilter =
  TypedEventFilter<MaxDurationChangedEvent>;

export interface MaxLengthChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type MaxLengthChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxLengthChangedEventObject
>;

export type MaxLengthChangedEventFilter =
  TypedEventFilter<MaxLengthChangedEvent>;

export interface MinCommitmentAgeChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type MinCommitmentAgeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinCommitmentAgeChangedEventObject
>;

export type MinCommitmentAgeChangedEventFilter =
  TypedEventFilter<MinCommitmentAgeChangedEvent>;

export interface MinDurationChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type MinDurationChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinDurationChangedEventObject
>;

export type MinDurationChangedEventFilter =
  TypedEventFilter<MinDurationChangedEvent>;

export interface MinLengthChangedEventObject {
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type MinLengthChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinLengthChangedEventObject
>;

export type MinLengthChangedEventFilter =
  TypedEventFilter<MinLengthChangedEvent>;

export interface PartnerConfiguration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PartnerConfigurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinCommitmentAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDiscount(
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeePercentage(
      feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDuration(
      maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxLength(
      maxLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinCommitmentAge(
      minCommitmentAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDuration(
      minDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinLength(
      minLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateName(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  getFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxLength(overrides?: CallOverrides): Promise<BigNumber>;

  getMinCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

  getMinDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getMinLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDiscount(
    discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeePercentage(
    feePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDuration(
    maxDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxLength(
    maxLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinCommitmentAge(
    minCommitmentAge: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDuration(
    minDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinLength(
    minLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateName(
    name: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    getFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    getMinDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDiscount(
      discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePercentage(
      feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDuration(
      maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLength(
      maxLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCommitmentAge(
      minCommitmentAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDuration(
      minDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLength(
      minLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateName(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DiscountChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): DiscountChangedEventFilter;
    DiscountChanged(
      previousValue?: null,
      newValue?: null
    ): DiscountChangedEventFilter;

    "FeePercentageChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): FeePercentageChangedEventFilter;
    FeePercentageChanged(
      previousValue?: null,
      newValue?: null
    ): FeePercentageChangedEventFilter;

    "MaxDurationChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): MaxDurationChangedEventFilter;
    MaxDurationChanged(
      previousValue?: null,
      newValue?: null
    ): MaxDurationChangedEventFilter;

    "MaxLengthChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): MaxLengthChangedEventFilter;
    MaxLengthChanged(
      previousValue?: null,
      newValue?: null
    ): MaxLengthChangedEventFilter;

    "MinCommitmentAgeChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): MinCommitmentAgeChangedEventFilter;
    MinCommitmentAgeChanged(
      previousValue?: null,
      newValue?: null
    ): MinCommitmentAgeChangedEventFilter;

    "MinDurationChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): MinDurationChangedEventFilter;
    MinDurationChanged(
      previousValue?: null,
      newValue?: null
    ): MinDurationChangedEventFilter;

    "MinLengthChanged(uint256,uint256)"(
      previousValue?: null,
      newValue?: null
    ): MinLengthChangedEventFilter;
    MinLengthChanged(
      previousValue?: null,
      newValue?: null
    ): MinLengthChangedEventFilter;
  };

  estimateGas: {
    getDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    getFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    getMinDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDiscount(
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeePercentage(
      feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDuration(
      maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxLength(
      maxLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinCommitmentAge(
      minCommitmentAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDuration(
      minDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinLength(
      minLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateName(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinCommitmentAge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDiscount(
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercentage(
      feePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDuration(
      maxDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLength(
      maxLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinCommitmentAge(
      minCommitmentAge: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDuration(
      minDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinLength(
      minLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateName(
      name: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
