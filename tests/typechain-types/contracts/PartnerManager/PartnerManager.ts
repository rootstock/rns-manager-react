/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PartnerManagerInterface extends utils.Interface {
  functions: {
    "addPartner(address,address)": FunctionFragment;
    "getPartnerConfiguration(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "removePartner(address)": FunctionFragment;
    "setPartnerConfiguration(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPartner"
      | "getPartnerConfiguration"
      | "isPartner"
      | "removePartner"
      | "setPartnerConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPartner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartnerConfiguration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePartner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerConfiguration",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartnerConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerConfiguration",
    data: BytesLike
  ): Result;

  events: {
    "PartnerAdded(address,address)": EventFragment;
    "PartnerConfigurationChanged(address,address)": EventFragment;
    "PartnerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartnerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PartnerConfigurationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartnerRemoved"): EventFragment;
}

export interface PartnerAddedEventObject {
  partner: string;
  configurationContract: string;
}
export type PartnerAddedEvent = TypedEvent<
  [string, string],
  PartnerAddedEventObject
>;

export type PartnerAddedEventFilter = TypedEventFilter<PartnerAddedEvent>;

export interface PartnerConfigurationChangedEventObject {
  partner: string;
  configurationContract: string;
}
export type PartnerConfigurationChangedEvent = TypedEvent<
  [string, string],
  PartnerConfigurationChangedEventObject
>;

export type PartnerConfigurationChangedEventFilter =
  TypedEventFilter<PartnerConfigurationChangedEvent>;

export interface PartnerRemovedEventObject {
  partner: string;
}
export type PartnerRemovedEvent = TypedEvent<
  [string],
  PartnerRemovedEventObject
>;

export type PartnerRemovedEventFilter = TypedEventFilter<PartnerRemovedEvent>;

export interface PartnerManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PartnerManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPartner(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPartnerConfiguration(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isPartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removePartner(
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartnerConfiguration(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPartner(
    partner: PromiseOrValue<string>,
    partnerConfiguration: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPartnerConfiguration(
    partner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isPartner(
    partner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removePartner(
    partner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPartnerConfiguration(
    partner: PromiseOrValue<string>,
    partnerConfiguration: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPartner(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPartnerConfiguration(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isPartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removePartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerConfiguration(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PartnerAdded(address,address)"(
      partner?: PromiseOrValue<string> | null,
      configurationContract?: PromiseOrValue<string> | null
    ): PartnerAddedEventFilter;
    PartnerAdded(
      partner?: PromiseOrValue<string> | null,
      configurationContract?: PromiseOrValue<string> | null
    ): PartnerAddedEventFilter;

    "PartnerConfigurationChanged(address,address)"(
      partner?: null,
      configurationContract?: null
    ): PartnerConfigurationChangedEventFilter;
    PartnerConfigurationChanged(
      partner?: null,
      configurationContract?: null
    ): PartnerConfigurationChangedEventFilter;

    "PartnerRemoved(address)"(
      partner?: PromiseOrValue<string> | null
    ): PartnerRemovedEventFilter;
    PartnerRemoved(
      partner?: PromiseOrValue<string> | null
    ): PartnerRemovedEventFilter;
  };

  estimateGas: {
    addPartner(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPartnerConfiguration(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePartner(
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPartnerConfiguration(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPartner(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPartnerConfiguration(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      partner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePartner(
      partner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerConfiguration(
      partner: PromiseOrValue<string>,
      partnerConfiguration: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
