/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "IERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677__factory>;
    getContractFactory(
      name: "IERC677TransferReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC677TransferReceiver__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "RegistrarAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistrarAccessControl__factory>;
    getContractFactory(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManager__factory>;
    getContractFactory(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManager__factory>;
    getContractFactory(
      name: "NodeOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeOwner__factory>;
    getContractFactory(
      name: "IPartnerConfiguration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartnerConfiguration__factory>;
    getContractFactory(
      name: "PartnerConfiguration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PartnerConfiguration__factory>;
    getContractFactory(
      name: "IPartnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPartnerManager__factory>;
    getContractFactory(
      name: "PartnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PartnerManager__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "PartnerRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PartnerRegistrar__factory>;
    getContractFactory(
      name: "IBaseRenewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRenewer__factory>;
    getContractFactory(
      name: "PartnerRenewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PartnerRenewer__factory>;
    getContractFactory(
      name: "RIF",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RIF__factory>;
    getContractFactory(
      name: "RNS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RNS__factory>;
    getContractFactory(
      name: "ERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Token__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "IERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC677>;
    getContractAt(
      name: "IERC677TransferReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC677TransferReceiver>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "RegistrarAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistrarAccessControl>;
    getContractAt(
      name: "FeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManager>;
    getContractAt(
      name: "IFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManager>;
    getContractAt(
      name: "NodeOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeOwner>;
    getContractAt(
      name: "IPartnerConfiguration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartnerConfiguration>;
    getContractAt(
      name: "PartnerConfiguration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PartnerConfiguration>;
    getContractAt(
      name: "IPartnerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPartnerManager>;
    getContractAt(
      name: "PartnerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PartnerManager>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "PartnerRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PartnerRegistrar>;
    getContractAt(
      name: "IBaseRenewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRenewer>;
    getContractAt(
      name: "PartnerRenewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PartnerRenewer>;
    getContractAt(
      name: "RIF",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RIF>;
    getContractAt(
      name: "RNS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RNS>;
    getContractAt(
      name: "ERC677Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Token>;
    getContractAt(
      name: "Resolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
